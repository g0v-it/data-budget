###############################################################################
# This is an example sdaas platform script 
# run it with the command:
#  sdaas -f build.sdaas
###############################################################################
set -a

SD_INCLUDE lexical_proximity_reasoner
# Include here plugins or your locals daas platform extension:
# e.g.: SD_INCLUDE aws
# e.g.: SD_INCLUDE scripts/local.include


###############################################################################
# KEES BOOTING WINDOW TOOLS
#
# SD_LOAD_RDF_FILE graph_uri input_file
#	graph_uri:=  valid RFC 3986 uri
#	input_file:= a valid local rdf file
#
###############################################################################
if [ $_SD_REBOOT -eq 1 ]; then
	SD_LOAD_RDF_FILE "urn:kees:config" data/kees/kees.ttl
	SD_LOAD_RDF_FILE "urn:kees:config" data/kees/introspection.ttl
	SD_LOAD_RDF_FILE "urn:kees:config" data/kees/trustmap.ttl
fi

###############################################################################
# KEES LEARNING WINDOW TOOLS
#
# SD_LEARN usage:
# SD_LEARN graph_uri [ resource | '<resource_array>[@]'] [ trasfomation | '<transformations_array>[@]' ]]
#	graph_uri:=  valid RFC 3986 uri
#	resource:= url['|'extension['|'curloptions['|'alternative dowload command]]]'
#	trasfomation:= [injector]'|'[input_selector]'|'[output]'|'[out_extension]'|'[filter]
#	injector is a command that accepts a file as input paramether and produce out on stdout. Default: 'cat'
#	input_selector is a iname of an input queue an a optional file selecor filter. Default: 'in/*'
#	output is a queue name where the filter results are produced. Default: 'out'
#	extension changes last extension to be applied to all output filenames (empty by default). 
#		If is equal to 'keep' extension is noth changed if empty the extension is removed
#	filter a command that accepts data in stdin and produce data in stdout
#
###############################################################################
SD_LEARN http://schema.org/ http://schema.org/version/latest/schema.ttl

SD_LEARN "urn:graph:istat" 'https://s3-eu-west-1.amazonaws.com/demo.hub1.linkeddata.center/data/comuni.csv' "|||.ttl|iconv -f 8859_1 -t UTF-8|tr -d '\r'|gateways/istat"
# same as accessing the original datasource:
#SD_LEARN "urn:graph:istat" https://www.istat.it/storage/codici-unita-amministrative/Elenco-comuni-italiani.csv "|||.ttl|iconv -f 8859_1 -t UTF-8|tr -d '\r'|gateways/istat"
# same as above but using a multiple transformation chain instead of a single pipeline:
#T=("iconv -f 8859_1 -t UTF-8 |in|cleaned|keep|tr -d '\r'" 'cat|cleaned|out|.ttl|gateways/istat'); 
#SD_LEARN "urn:graph:istat" 'https://s3-eu-west-1.amazonaws.com/demo.hub1.linkeddata.center/data/comuni.csv' T[@]
# same as above using a php gateway:
#SD_LEARN "urn:graph:istat" https://www.istat.it/storage/codici-unita-amministrative/Elenco-comuni-italiani.csv '|||.ttl|php gateway/istat.php'
# same as above but using a mirror on aws s3 ( requires the aws command properly configured and the aws plugin):
#SD_LEARN_S3 "urn:graph:istat" 's2://demo.hub1.linkeddata.center/data/comuni.csv' '|||.ttl|php gateway/istat.php'


# loads https://www.w3.org/ns/prov using contente negotiation in graph named <$GRAPH_PREFIX/prov_ontology> 
# SD_LEARN "$GRAPH_PREFIX/prov_ontology"  'https://www.w3.org/ns/prov|.ttl|-H 'Accept: text/ttl'"

# loads a wikipedia in graph named <urn:city:Milan> 
# SD_LEARN urn:city:Milan  "http://dbpedia.org/resource/Milan|.ttl|-H 'Accept: text/ttl'"

# query some data on http:/dbpedia.org/ using content negotiation to generate a turtle file putting the result in graph named http://example.com/known_cities
# SD_LEARN http://dbpepedia.org/resource "http:/dbpedia.org/sparql|.ttl|-H 'Accept: text/ttl' --data-urlencode query=describe dbr:Milan dbr:Rome"

# Loads files data/kees.ttl and data/catalog.ttl into graph <urn:kees:config>
# SRCs=(data/kees.ttl data/catalog.ttl) SD_LEARN urn:kees:config SRCs[@]

# Multiple resouce loading with a simple transformation
# SRCs=(data/dump1.rdf.gz data/dump2.rdf.gz) SD_LEARN SD_LEARN http://example.com/dataset SRCs[@] "zcat"
# same as ... "zcat|in/*|out||cat"
# same as ... "||||zcat"
# same as ... "zcat|||||"

# complex ingestion task activity with multiple extractions and trasformations 
# note:
#  . the additional  paramethers to  curl used in download data dumps,
#  . the a gateway that operates only on a single file,
#  . the multiple gateway usage
#  . complex transformation sequence
#S=(\
#	"http://example.com/private/file.csv.page1.gz|auto|-u '${USER}:${PASSWORD}'" \
#	"http://example.com/private/file.csv.page2.gz|auto|-u '${USER}:${PASSWORD}'" \
#	"http://example.com/api|auto|-X POST --data-binary=extract_catalog_as_csv"
#	localfile.ttl \
#)
#T=(\
#	"zcat|in/catalog.csv*.gz|tmp1|.ttl|php gw.php"\
#	"|in/localfile.ttl|tmp1" \
#	"|tmp1/*.ttl|out|.nt|rapper -t turtle"
#)
#SD_LEARN "$GRAPH_PREFIX/graph1" S[@] T[@] 


###############################################################################
# KEES REASONING WINDOW TOOLS
# 
# SD_REASONING_BY SD_EVAL_CONSTRUCTOR graph_uri construct_string|'@'construct_file
# graph_uri:=  valid RFC 3986 uri
# construct_string is a SPARQL 1.1. QUERY CONSTRUCT
# construct_file is a file that contains a SPARQL 1.1. QUERY CONSTRUCT
#
# D_REASONING_BY SD_LEXICAL_PROXIMITY graph_uri data_selector [-m|--min-relevance min-relevance] [-M|--max-relevance max-relevance] [-l|--limit limit] [-p|--predicate predicate]
# graph_uri:=  valid RFC 3986 uri
# data_selector a SPARQL QUERY CONSTRUCT that generates triples in the form of <subject_uri> <urn:sdaas:text> "text litteral". It can be a filena name starting with @
# min-relevance:= a decimal value  from 0 to 1 stating the minimum proximity score allowed. Default 0.6
# max-relevance:= a decimal value  from 0 to 1 stating the maximum proximity score allowed. Default 1.0
# limit:= a positive integer stating the maximum number of proximity returned. Default 3
# predicate:= the uri for the propery to be inferred. Default 'urn:sdaas:similarTo'
###############################################################################
SD_REASONING_BY SD_EVAL_CONSTRUCTOR "urn:graph:trustmap_default" @axioms/default_trustmap.construct 
SD_REASONING_BY SD_EVAL_CONSTRUCTOR "urn:graph:calculated_trusts" @axioms/calculated_trusts.construct
SD_REASONING_BY SD_LEXICAL_PROXIMITY urn:graph:cities_with_similar_name -i '@axioms/city_name_index.construct' -s '@axioms/city_names_starting_with_m.select' -p urn:istat:hasSimilarNameTo
# The above statement populates the graph "urn:graph:cities_with_similar_name" with triples like to: <urn:istat:comune:xxxx> <urn:istat:hasSimilarNameTo> <urn:istat:comune:yyyyy>.


###############################################################################
# KEES TEACHING WINDOW TOOLS
###############################################################################
SD_CREATE_DATA_DISTRIBUTION

SD_THATS_ALL_FOLKS