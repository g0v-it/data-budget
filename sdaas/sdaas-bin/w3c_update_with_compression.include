if [ ! -z ${__module_w3c_update_with_compression+x} ]; then return ; else __module_w3c_update_with_compression=1 ; fi

SD_REQUIRES_VAR SD_DEBUG SD_SPARQL_UPDATE_ENDPOINT SD_LOAD_RETRY SD_MAX_RETRY_TIME
SD_REQUIRES_CMD SD_DEBUG_INFO gzip curl

SD_SPARQL_UPDATE_CURL_OPTIONS="$2"

function SD_SPARQL_UPDATE {
	local data="$1"
	local traceFile="${2:-$(SD_MK_DEBUG_TMP_FILE sparql_update_trace)}"
	SD_DEBUG_INFO  "SD_SPARQL_UPDATE_COMPRESSED '${data:0:40}...'"
	local curlCommand="curl -X POST "
		curlCommand+="--silent "
		curlCommand+="--retry $SD_LOAD_RETRY --retry-delay 5 --retry-max-time $SD_MAX_RETRY_TIME "
		curlCommand+="--data-binary @- "
		curlCommand+="--header 'Content-Type: application/sparql-update' "
		curlCommand+="--header 'Content-Encoding: gzip' "
		curlCommand+="--trace-ascii \"$traceFile\" "
		curlCommand+="-f ${SD_SPARQL_UPDATE_CURL_OPTIONS:+ \"$SD_SPARQL_UPDATE_CURL_OPTIONS\"} \"$SD_SPARQL_UPDATE_ENDPOINT\""
	if [ "${data:0:1}" = "@" ]; then 
		gzip "${data#"@"}" -c | eval $curlCommand || SD_FATAL_ERROR "Unable to update using $data file, see $traceFile"
	else
		echo "$data" | gzip -c | eval $curlCommand || SD_FATAL_ERROR "Unable to update using construct, see $traceFile"
	fi
	if [  $SD_DEBUG -eq 0 ] && [ -d "$traceFile" ]; then rm -f "$traceFile" ; fi
}
