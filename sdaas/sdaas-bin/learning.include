if [ ! -z ${__module_learning+x} ]; then return ; else __module_learning=1 ; fi

SD_REQUIRES_VAR SD_CACHE SD_HOSTNAME
SD_REQUIRES_CMD SD_LOAD_RDF_FILE SD_LOG md5sum hostname find curl realpath tail awk mktemp

### default command used to get web resources
SD_DEFAULT_DOWNLOADER=${SD_DEFAULT_DOWNLOADER:=curl --silent -L --retry 3 --retry-delay 5 --retry-max-time 30 --compressed} 	## TODO: when curl 7.52.0. consider to add --retry-connrefused 

SD_ACTIVITY_DIR=''
SD_ACTIVITY_ID=''	

# @description
#	append a prov statement after substituting variables:
#	. **TIMESTAMP** with the current time in xsd format
#
# @arg $1 a prov statement template
function _SD_LOG_PROV {
	SD_REQUIRES_VAR SD_ACTIVITY_DIR
	local provStatement="$1" 
	provStatement="${provStatement/TIMESTAMP/\"$(date '+%Y-%m-%dT%T')\"^^xsd:datetime}"
	echo "$provStatement" >> "$SD_ACTIVITY_DIR/prov.ttl"
}


function _SD_ACTIVITY_LOG {
	SD_LOG "$SD_ACTIVITY_ID $1" "$2"
}

# @description
# 	create a temporary directory with a in and out subdirectories to store activity input and output
#	it also create and initialize a prov.ttl file to save provenance info
#
function _SD_START_ACTIVITY {
	SD_REQUIRES_VAR SD_CACHE SD_HOSTNAME
	local comment="${1:-'a knowledge base ingestion activity'}"	
	SD_ACTIVITY_DIR="$(realpath "${2:-$(mktemp -d --tmpdir="$SD_CACHE" activity-XXXXXXXXXX)}")" || SD_FATAL_ERROR "unable to create SD_ACTIVITY_DIR"
	SD_ACTIVITY_ID="$(basename "$SD_ACTIVITY_DIR")"
	
	mkdir -p "$SD_ACTIVITY_DIR/out" || SD_FATAL_ERROR "Error creating activity default output dir $SD_ACTIVITY_DIR/out"
	mkdir -p "$SD_ACTIVITY_DIR/in" || SD_FATAL_ERROR "Error creating activity default input dir $SD_ACTIVITY_DIR/in"
		
	local baseUri="file://${SD_HOSTNAME}${SD_ACTIVITY_DIR}/"
	baseUri=${baseUri// /%20}
	cat<<-EOT > "$SD_ACTIVITY_DIR/prov.ttl"
		@base <$baseUri> .
		@prefix : <prov.ttl#> .
		@prefix prov: <http://www.w3.org/ns/prov#> .
		@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
		@prefix xsd: <http://www.w3.org/2000/10/XMLSchema#> .
	EOT
	_SD_LOG_PROV ":learn a prov:Activity; prov:startedAtTime TIMESTAMP;rdfs:comment \"\"\"$comment\"\"\" ."
}


function _SD_MK_UID {
	local seed=${1-=$(cat /dev/random)}
	echo -n "$seed"| md5sum | awk '{print $1}'
}





# @description
#	downloads web resources into the activity "in" directoty
#	It requires a list of download requests in _SD_SOURCES[@] variable. Download requests must be in the form: <url>[ |<extension> [ | <downloader options> [ | downloader]]] where:
#	. <url> is a file or an url recognized by downloader. file is converted in url as "file://${SD_HOSTNAME}$(realpath "$url")"
#	. <extension> is an extension to be added to the downloaded file, ifi is equal to "auto" it tries to preserve the original extension (if present) or adds ".data"
#	. <downloader options> extra options added to downloader command
#	. <downloader> the commad to be used to download. it must accept <url> end write result on std out
#	  if not specified it uses the command contained in SD_DEFAULT_DOWNLOADER (curl)
#
# @arg $_SD_SOURCES [@] a list of download request
# @arg $SD_HOSTNAME the name of current host
# @arg $SD_ACTIVITY_DIR
# @arg $SD_DEFAULT_DOWNLOADER a default download command (like curl)
# @arg $SD_DEBUG_FILE a file to store debug info
function _SD_EXTRACT {
	SD_REQUIRES_VAR SD_HOSTNAME SD_DEFAULT_DOWNLOADER SD_ACTIVITY_DIR _SD_SOURCES SD_DEBUG_FILE
	SD_REQUIRES_CMD md5sum realpath tail awk
	
	_SD_LOG_PROV ":learn prov:wasInfluencedBy :extraction. :extraction a prov:Activity; prov:startedAtTime TIMESTAMP ."
	
	local downloadRequest
	for downloadRequest in "${_SD_SOURCES[@]}"; do
		##### parse downloadRequest
		local url extension downloaderOpts downloader
		IFS='|' read  url extension downloaderOpts downloader  <<< "$downloadRequest"
		extension=${extension:=auto}
		downloader=${downloader:=$SD_DEFAULT_DOWNLOADER}

	
		##### add schema to url if a file is passed
		if [ -f "$url" ]; then url="file://$(realpath "$url")"; url=${url// /%20}; fi
		
		if [  "$extension" = 'auto' ]; then
			#####  try to preseve extension, if any
			local resourcePath="${url##*/}"
			extension="${resourcePath##*.}"
			if [ "$extension" = "$resourcePath" ]; then extension='data'; fi # i.e. if no extension in url than use .data
			extension=".${extension}"
		fi
		local outPath="in/$(_SD_MK_UID "$url")${extension}"
		
		SD_DEBUG_INFO "_SD_EXTRACT downloader='$downloader' url='$url' downloaderOpts='$downloaderOpts' outPath='$outPath'"
		##### allow error happens during download execution using set -e
		local old_setting=${-//[^e]/}
		set -e
		$downloader "$url" $downloaderOpts 2>> "$SD_DEBUG_FILE" 1> "$SD_ACTIVITY_DIR/$outPath"
		local downloadStatus=$?
		if [[ -n "$old_setting" ]]; then set -e; else set +e; fi	
		##### continue with default set options
		
		if [ $downloadStatus -ne 0 ]; then
			_SD_ACTIVITY_LOG "error downloading $url - $(tail -1 "$SD_DEBUG_FILE")"
			_SD_LOG_PROV ":extraction prov:invalidated <$url>."
			return 1
		else
			_SD_ACTIVITY_LOG "downloaded $url"
			_SD_LOG_PROV ":learn prov:used <$url> . :extraction prov:generated <$outPath> ."
		fi
	done
	
	_SD_LOG_PROV ":extraction prov:endedAtTime TIMESTAMP ."
}


function _SD_TRANSFORMER {
	local preprocessor="$1"
	local inputFile="$2"
	local pipeline="$3"
	local outputPath="$4"
	$preprocessor "$inputFile"| $pipeline 2>> "$SD_DEBUG_FILE" 1> "$outputPath"
}

# @description
#	apply a set of transformation steps to the activity input
#   a transformation has this general format
#	<input> <output> <command> <newExtension> where:
#	 . <transformation processor> a command to exttract data or an alias
#	 . <inputdir/filter> is a input filter for find command relative to activity dir that must exists
#	 . <outputdir> is a directory relative to activity dir. If not existing it is created
#	 . <extension> changes last extension to be applied to all output filename (empty by default). If is equal to 'keep' extension is noth changed
#	 . <pipeline> it is a pipeline that will be applied to all inputs
#   The ouput filenames are generated from input one
#
# @arg $1 a list of transformation
function _SD_TRANSFORM {
	SD_REQUIRES_VAR SD_HOSTNAME SD_ACTIVITY_DIR
	SD_REQUIRES_CMD find
	
	_SD_LOG_PROV ":learn prov:wasInfluencedBy :transformation. :transformation a prov:Activity; prov:wasInformedBy :extraction; prov:startedAtTime TIMESTAMP ."
	
	local transformationRequest
	for transformationRequest in "${_SD_TRANSFORMATIONS[@]}"; do
		#### parse transformation request
		local preprocessor inputFilter outputDir postprocessor pipeline
		IFS='|' read -r preprocessor inputFilter outputDir postprocessor pipeline <<< "$transformationRequest"
		preprocessor=${preprocessor:=cat}
		inputFilter=${inputFilter:=in}
		outputDir=${outputDir:=out}
		pipeline=${pipeline:=cat}
		#### postprocessor can be empty
		
		#### extract input dir and file name filter to be used with find command
		local inputDir="${inputFilter%/*}"
		local fileNameFilter="${inputFilter##*/}"
		if [ "$fileNameFilter" = "$inputFilter" ]; then fileNameFilter='*' ; fi ##no trailing / in input dir
		
		
		#### ensure input and output dir exist
		test -d "$SD_ACTIVITY_DIR/$inputDir" || SD_FATAL_ERROR "_SD_TRANSFORM input dir does not exists"
		test -d "$SD_ACTIVITY_DIR/$outputDir" || mkdir "$SD_ACTIVITY_DIR/$outputDir" || SD_FATAL_ERROR "_SD_TRANSFORM cant create output dir $outputDir"
			
		local inputFile
		for inputFile in $(cd "$SD_ACTIVITY_DIR"; find "$inputDir" -name "$fileNameFilter" -type f  -print | sort); do
			#### generate an output path
			local outputFile
			local outputFileName="$(basename "$inputFile")" 
			if [ "$postprocessor" = "keep" ]; then
				outputFile="$outputDir/${outputFileName}"
			else 
				outputFile="$outputDir/${outputFileName%.*}"	# remove old extension
				outputFile+="${postprocessor}"		# add new estension (if set)
			fi	
			SD_DEBUG_INFO "$SD_DEFAULT_TRANSFORMER preprocessor='$preprocessor' inputFile='$SD_ACTIVITY_DIR/$inputFile' pipeline='$pipeline' output='$SD_ACTIVITY_DIR/$outputFile'"
			$preprocessor "$SD_ACTIVITY_DIR/$inputFile" | eval $pipeline 2>> "$SD_DEBUG_FILE" 1> "$SD_ACTIVITY_DIR/$outputFile"
			if [ $? -ne 0 ]; then SD_FATAL_ERROR "_SD_TRANSFORMER cant execute transformation" ; fi
			_SD_LOG_PROV ":transformation prov:used <$inputFile)>; prov:generated <$outputFile> ."
			
		done		
		_SD_ACTIVITY_LOG "files in '$inputDir/$fileNameFilter' have been processed with '$pipeline'. The results were placed in '$outputDir'."	
	done
	
	_SD_LOG_PROV ":transformation prov:endedAtTime TIMESTAMP ."	
}



function _SD_COMMIT_ACTIVITY {
	local graphName="$1"
	
	if [ $_SD_REBOOT -eq 0 ]; then  
		_SD_ACTIVITY_LOG "cleaning graph <$g>."
		SD_SPARQL_UPDATE "DROP SILENT GRAPH <$g>" ;
	fi
		
	
	local rdfFile
	for rdfFile in $(find "$SD_ACTIVITY_DIR/out" -name "*" -type f  -print); do
		SD_LOAD_RDF_FILE "$graphName" "$rdfFile"
	done
	
	_SD_LOG_PROV ":learn prov:generated :graph. :graph a prov:Entity; prov:wasGeneratedBy :learn; prov:generatedAtTime TIMESTAMP ."
	_SD_LOG_PROV ":learn prov:endedAtTime TIMESTAMP ."
	SD_LOAD_RDF_FILE "$graphName" "$SD_ACTIVITY_DIR/prov.ttl"
	
}



function _SD_INVALIDATE_GRAPH {
	local graphName="$1"
	
	_SD_LOG_PROV ":learn prov:invalidated :graph. :graph a prov:Entity; sd:name <$g>; prov:invalidatedAtTime TIMESTAMP; prov:wasInvalidatedBy :learn ."	
	_SD_LOG_PROV ":learn prov:endedAtTime TIMESTAMP ."
	SD_LOAD_RDF_FILE "$graphName" "$SD_ACTIVITY_DIR/prov.ttl"
}



# @description 
#	implements a named graph ingestion activity maging provenance info
#
# @arg $1 the name the graph to,load
# @arg $2 a source URI or an array of source URIs. If not provided defaults to $1
# @arg $3 a data dump URL or an array of data dumps. If not provided defaults to $2
# @arg $4 an optional transformation or an array transformation
#
#
# @example
# 	#loads https://www.w3.org/ns/prov web resource in graph named <https://www.w3.org/ns/prov> using <https://www.w3.org/ns/prov> as source
#   #same as SD_LEARN https://www.w3.org/ns/prov https://www.w3.org/ns/prov
#   SD_LEARN https://www.w3.org/ns/prov
#
function SD_LEARN {
	SD_REQUIRES_VAR 1
	local g="$1"
	
	########### PARSE ARGS
	case $# in
		1)
			_SD_SOURCES=("$g")
			_SD_TRANSFORMATIONS=('|in|out|keep|')
			;;
		2)		
			if [ ${2:${#2} - 3} = "[@]" ]; then _SD_SOURCES=("${!2}"); else _SD_SOURCES=("$2"); fi
			_SD_TRANSFORMATIONS=('|in|out|keep|')
			;;
		3)	
			if [ ${2:${#2} - 3} = "[@]" ]; then _SD_SOURCES=("${!2}"); else _SD_SOURCES=("$2"); fi
			if [ ${3:${#3} - 3} = "[@]" ]; then _SD_TRANSFORMATIONS=("${!3}"); else _SD_TRANSFORMATIONS=("$3"); fi
			;;
		*)
			SD_FATAL_ERROR "Wrong argument number for SD_LEARN"
			;;
	esac
	
	local comment="starting learning of graph <$g>."
	_SD_START_ACTIVITY "$comment"
	_SD_ACTIVITY_LOG "$comment"
	_SD_EXTRACT
	if [ $? -eq 0 ]; then
		_SD_TRANSFORM 
		_SD_COMMIT_ACTIVITY "$g"
		_SD_ACTIVITY_LOG "committed."
	else
		_SD_INVALIDATE_GRAPH "$g"
	 	_SD_ACTIVITY_LOG "aborted while downloading resources."
	fi
	
	if [  $SD_DEBUG -eq 0 ]; then rm -rf "$SD_ACTIVITY_DIR" ; fi
}

