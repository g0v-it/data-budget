#!/usr/bin/env php
<?php

/**
 * Gateway per trasformare i disegni di legge di bilancio, le leggi di bilancio 
 * e rendiconti spesa per capitolo su BDAP da  formato csv a rdf g0v-ap
 *  
 **/
isset($argv[1]) || die("Gateway usage: bdap <dataset_id>");

include "Helper.php";

/**
 * Detect input schema from the dataset id (csv expected)
 */
$bdapDatasetId = $argv[1];


/**
 * Extract  $bdapDatasetYear and bdapDatasetType from $bdapDatasetId
 */
preg_match("/^spd_(lbf|rnd|dlb)_spe_elb_cap_01_(20[0-9]{2})$/", $bdapDatasetId, $matches) || die("Unreconized dataset id $bdapDatasetId");
$bdapDatasetYear= intval($matches[2]);
$bdapDatasetType= $matches[1];


/**
 * Detect $mefReportClass
 */
switch ($bdapDatasetType) {
    case "dlb":
        $mefReportClass="DisegnoLeggeDiBilancio";
        break;
    case "lbf":
        $mefReportClass="LeggeDiBilancio";
        break;
    case "rnd":
        $mefReportClass="RendicontoFinanziario";
        break;
}


/**
 * Detect the csv scheme form year and dataset type
 */
$a = "amministrazione";
$m = "missione";
$p = "programma";
$az = "azione";
$c = "capitolo";
$b = "fact";
if ($bdapDatasetYear >= 2017) {
    $match = array(
        $a => 2,
        $m => 13,
        $p => 15,
        $az => 19,
        $c => 6
    );
    switch ($bdapDatasetType) {
        case "lbf":
            $match[$b]=20;
            break;
            
        case "rnd":
            $match[$b]=35;
            break;
            
        case "dlb":
            $match[$b]=52;
            ;
            break;
    }
} else {
    $match = array(
        $a => 2,
        $m => 14,
        $p => 16,
        $az => 18,
        $c => 6
    );
    switch ($bdapDatasetType) {
        case "lbf":
            $match[$b]=21;
            break;
            
        case "rnd":
            $match[$b]=36;
            break;
            
        default:
            die( "$bdapDatasetType not recognized for year $bdapDatasetYear");
            break;
    }
}


/**
 * parse std input and generate rdf triples in turtle format
 */
echo "# 
# Generated by dbap.php gateway from https://g0v-it.github.io/data-budget/
# according with fr-ap-mef  profile (see https://g0v-it.github.io/data-budget/fr-ap-mef)
@prefix fr: <http://linkeddata.center/botk-fr/v1#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> . 
@prefix skos: <http://www.w3.org/2004/02/skos/core#> . 
@prefix dcat: <http://www.w3.org/ns/dcat#> . 
@prefix dct: <http://purl.org/dc/terms/> . 
@prefix foaf: <http://xmlns.com/foaf/0.1/> . 
@prefix interval: <http://reference.data.gov.uk/def/intervals/> . 
@prefix qb: <http://purl.org/linked-data/cube#> . 
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> . 
@prefix sdmx-attribute:	<http://purl.org/linked-data/sdmx/2009/attribute#> .
@prefix mef: <http://w3id.org/g0v/it/mef#> .
@prefix resource: <http://mef.linkeddata.cloud/resource/> .


<> foaf:primaryTopic resource:$bdapDatasetId .

resource:$bdapDatasetId a mef:$mefReportClass ;
    fr:refPeriod <http://reference.data.gov.uk/id/gregorian-interval/{$bdapDatasetYear}-01-01T00:00:00/P1Y> ;  
    sdmx-attribute:unitMeasure <http://publications.europa.eu/resource/authority/currency/EUR> 
.



";

//skips header
fgets(STDIN);$recordNum=0;

while ($rawdata = fgetcsv(STDIN, 2048, ';')) {
    $recordNum++;
    $esercizio = $rawdata[0];
    $amministrazione = Helper::FILTER_SANITIZE_TURTLE_STRING($rawdata[$match[$a]]);
    $missione = Helper::FILTER_SANITIZE_TURTLE_STRING($rawdata[$match[$m]]);
    $programma = Helper::FILTER_SANITIZE_TURTLE_STRING($rawdata[$match[$p]]);
    $azione = Helper::FILTER_SANITIZE_TURTLE_STRING($rawdata[$match[$az]]); 
    $capitolo = Helper::FILTER_SANITIZE_TURTLE_STRING($rawdata[$match[$c]-1] . " - " . $rawdata[$match[$c]]);
    $budget = round( floatval($rawdata[$match[$b]]),2);

    //Codes then used in notation and uri construction
    $a_code  = Helper::STRING_SIGNATURE($amministrazione);
    $m_code  = Helper::STRING_SIGNATURE($a_code . $missione);
    $p_code  = Helper::STRING_SIGNATURE($m_code . $programma);
    $az_code = Helper::STRING_SIGNATURE($p_code . $azione);
    $c_code  = Helper::STRING_SIGNATURE($az_code . $capitolo);
    
    //Uris
    $r_uri  = "resource:{$bdapDatasetId}_{$recordNum}"
    $a_uri  = "{$r_uri}_ministero";
    $m_uri  = "{$r_uri}_missione";
    $p_uri  = "{$r_uri}_programma";
    $az_uri = "{$r_uri}_azione";
    $c_uri  = "{$r_uri}_capitolo"";

 
    echo "
#### Source: record number $recordNum
$c_uri a mef:Capitolo;
    qb:dataSet resource:{$bdapDatasetId} ;
    skos:notation \"$c_code\" ;
    skos:altLabel \"$capitolo\"@it ;
    fr:isPartOf $az_uri ;
    fr:amount $budget ."
.
$az_uri a mef:Azione ;
    skos:notation \"$az_code\" ;
    fr:isPartOf $p_uri ;
    skos:altLabel \"$azione\"@it
.
$p_uri a mef:Programma ;
    skos:notation \"$p_code\" ;
    fr:isPartOf $m_uri ;
    skos:altLabel \"$programma\"@it 
.
$m_uri a mef:Missione ;
    skos:notation \"$m_code\" ;
    fr:isPartOf $a_uri ;
    skos:altLabel \"$missione\"@it 
.
$a_uri a mef:Ministero ;
    skos:notation \"$a_code\" ;
    skos:altLabel \"$amministrazione\"@it 
.
resource:{$bdapDatasetId} skos:hasTopConcept $a_uri .
" ;
    
}
