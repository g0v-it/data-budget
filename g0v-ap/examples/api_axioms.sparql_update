##
## AXIOM: create account nodes suitable for easy api development
##
PREFIX g0v: <http://data.budget.g0v.it/g0v-budget/v1>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX skos:     <http://www.w3.org/2004/02/skos/core#> 
PREFIX dcat:      <http://www.w3.org/ns/dcat#> 
PREFIX dct:      <http://purl.org/dc/terms/> 
PREFIX foaf:     <http://xmlns.com/foaf/0.1/> 
PREFIX interval: <http://reference.data.gov.uk/def/intervals/> 
PREFIX qb:       <http://purl.org/linked-data/cube#> 
PREFIX sdmx-dimension:  <http://purl.org/linked-data/sdmx/2009/dimension#> 
PREFIX sdmx-measure:    <http://purl.org/linked-data/sdmx/2009/measure#> 
PREFIX sdmx-attribute:  <http://purl.org/linked-data/sdmx/2009/attribute#> 
PREFIX : <urn:local:g0v:api:v1:>



## create an api account budget
INSERT {
	?accountUri a :Account ;
       :amount ?amount;
       :code ?code;
       :name ?name;
       :topPartitionLabel ?best_top_partition_label;
       :secondPartitionLabel ?best_second_partition_label;
	   dct:subject ?account_subject
} WHERE {
	{
		SELECT ?account_subject (SUM (?budget_amount) AS ?amount) WHERE {
		  ?budget a g0v:Budget;  
					  g0v:subject ?budget_subject;
					  g0v:obsValue ?budget_amount.
		  ?budget_subject skos:broader ?account_subject .    
		} GROUP BY ?account_subject
	}

	?account_subject skos:prefLabel ?name ; skos:notation ?code .
	
	# find te best labels for top levele and secon level taxonomy concepts
	OPTIONAL {?account_subject skos:broader/skos:broader/skos:prefLabel ?second_partition_label}
	OPTIONAL {?account_subject skos:broader/skos:broader/skos:prefLabel ?second_partition_short_label}
	BIND( COALESCE(?second_partition_short_label,?second_partition_label) AS ?best_second_partition_label)
	
	OPTIONAL {?account_subject skos:broader/skos:broader/skos:broader/skos:prefLabel ?top_partition_label}
	OPTIONAL {?account_subject skos:broader/skos:broader/skos:broader/skos:altLabel ?top_partition_short_label}
	BIND( COALESCE(?top_partition_short_label,?top_partition_label) AS ?best_top_partition_label)
	
	BIND( UUID() AS ?accountUri )
}

;

## create an api account record
INSERT {
	?accountRecordUri a :AccountRecord;
	   :amount  ?amount;
	   :year ?year;
	   :code ?code
} WHERE {  

  {
    SELECT ?account_record_subject ?year(SUM (?record_amount) AS ?amount) WHERE {
      ?budget a g0v:Budget; g0v:subject/skos:broader ?account_subject.
      ?account_subject skos:closeMatch ?account_record_subject.
         
      ?record a g0v:Record;  
                g0v:subject/skos:broader ?account_record_subject;
                g0v:obsValue ?record_amount;
                qb:dataSet/sdmx-dimension:refPeriod ?year.
                  
    } GROUP BY ?account_record_subject ?year 
  }
 
  ?account_record_subject skos:notation ?code 
  BIND( UUID() AS ?accountRecordUri )
}

;

## create an api accountTopPartition
INSERT {
	?accountUriTopPartition a :AccountTopPartition ;
       :amount ?amount;
       :label ?top_partition_label;
} WHERE {
  	{
		SELECT ?top_partition_label (SUM (?account_amount) AS ?amount)
        WHERE {
          ?accountUri a :Account;
                        :amount ?account_amount;
                        :topPartitionLabel ?top_partition_label;
        }GROUP BY ?top_partition_label 
	}
  
	BIND( UUID() AS ?accountUriTopPartition )
}
;

## create an api accountSecondPartition
INSERT {
	?accountUriSecondPartition a :AccountSecondPartition ;
       :amount ?amount;
       :label ?second_partition_label;
} WHERE {
  	{
		SELECT ?second_partition_label (SUM (?account_amount) AS ?amount)
        WHERE {
          ?accountUri a :Account;
                        :amount ?account_amount;
                        :secondPartitionLabel ?second_partition_label;
        }GROUP BY ?second_partition_label 
	}
  
	BIND( UUID() AS ?accountUriSecondPartition )
}

;

## add last_amount to account

INSERT { 
	?account :last_amount ?last_amount
} WHERE {  
    
    {
		SELECT ?code_history ( MAX (?year) AS ?last_year)
		WHERE {
		  ?account_record a :AccountRecord;
				:code ?code_history ;
				:year ?year             
		} GROUP BY ?code_history 
	}
    
  	?account a :Account;
               :code ?code.
  
  	?account_record a :AccountRecord; 
                      :code ?code_history; 
                      :year ?last_year; 
                      :amount ?last_amount.
	
	FILTER(?code = ?code_history )
}



	